// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package forumimpl

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService",
		Iface: reflect.TypeOf((*RemoteForumService)(nil)).Elem(),
		Impl:  reflect.TypeOf(remoteForumImpl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return remoteForumService_local_stub{impl: impl.(RemoteForumService), tracer: tracer, createMessageMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "CreateMessage", Remote: false}), createThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "CreateThread", Remote: false}), deleteMessageMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "DeleteMessage", Remote: false}), deleteThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "DeleteThread", Remote: false}), getThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "GetThread", Remote: false}), getThreadsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "GetThreads", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return remoteForumService_client_stub{stub: stub, createMessageMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "CreateMessage", Remote: true}), createThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "CreateThread", Remote: true}), deleteMessageMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "DeleteMessage", Remote: true}), deleteThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "DeleteThread", Remote: true}), getThreadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "GetThread", Remote: true}), getThreadsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/forum/RemoteForumService", Method: "GetThreads", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return remoteForumService_server_stub{impl: impl.(RemoteForumService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return remoteForumService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[RemoteForumService] = (*remoteForumImpl)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*remoteForumImpl)(nil)

// Local stub implementations.

type remoteForumService_local_stub struct {
	impl                 RemoteForumService
	tracer               trace.Tracer
	createMessageMetrics *codegen.MethodMetrics
	createThreadMetrics  *codegen.MethodMetrics
	deleteMessageMetrics *codegen.MethodMetrics
	deleteThreadMetrics  *codegen.MethodMetrics
	getThreadMetrics     *codegen.MethodMetrics
	getThreadsMetrics    *codegen.MethodMetrics
}

// Check that remoteForumService_local_stub implements the RemoteForumService interface.
var _ RemoteForumService = (*remoteForumService_local_stub)(nil)

func (s remoteForumService_local_stub) CreateMessage(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (err error) {
	// Update metrics.
	begin := s.createMessageMetrics.Begin()
	defer func() { s.createMessageMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.CreateMessage", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateMessage(ctx, a0, a1, a2, a3)
}

func (s remoteForumService_local_stub) CreateThread(ctx context.Context, a0 uint64, a1 uint64, a2 string, a3 string) (r0 uint64, err error) {
	// Update metrics.
	begin := s.createThreadMetrics.Begin()
	defer func() { s.createThreadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.CreateThread", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateThread(ctx, a0, a1, a2, a3)
}

func (s remoteForumService_local_stub) DeleteMessage(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	// Update metrics.
	begin := s.deleteMessageMetrics.Begin()
	defer func() { s.deleteMessageMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.DeleteMessage", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.DeleteMessage(ctx, a0, a1)
}

func (s remoteForumService_local_stub) DeleteThread(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	// Update metrics.
	begin := s.deleteThreadMetrics.Begin()
	defer func() { s.deleteThreadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.DeleteThread", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.DeleteThread(ctx, a0, a1)
}

func (s remoteForumService_local_stub) GetThread(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 uint64, a4 string) (r0 uint64, r1 RawForumContent, r2 []RawForumContent, err error) {
	// Update metrics.
	begin := s.getThreadMetrics.Begin()
	defer func() { s.getThreadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.GetThread", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetThread(ctx, a0, a1, a2, a3, a4)
}

func (s remoteForumService_local_stub) GetThreads(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (r0 uint64, r1 []RawForumContent, err error) {
	// Update metrics.
	begin := s.getThreadsMetrics.Begin()
	defer func() { s.getThreadsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "forumimpl.RemoteForumService.GetThreads", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetThreads(ctx, a0, a1, a2, a3)
}

// Client stub implementations.

type remoteForumService_client_stub struct {
	stub                 codegen.Stub
	createMessageMetrics *codegen.MethodMetrics
	createThreadMetrics  *codegen.MethodMetrics
	deleteMessageMetrics *codegen.MethodMetrics
	deleteThreadMetrics  *codegen.MethodMetrics
	getThreadMetrics     *codegen.MethodMetrics
	getThreadsMetrics    *codegen.MethodMetrics
}

// Check that remoteForumService_client_stub implements the RemoteForumService interface.
var _ RemoteForumService = (*remoteForumService_client_stub)(nil)

func (s remoteForumService_client_stub) CreateMessage(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createMessageMetrics.Begin()
	defer func() { s.createMessageMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.CreateMessage", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += 8
	size += (4 + len(a3))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.Uint64(a2)
	enc.String(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteForumService_client_stub) CreateThread(ctx context.Context, a0 uint64, a1 uint64, a2 string, a3 string) (r0 uint64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createThreadMetrics.Begin()
	defer func() { s.createThreadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.CreateThread", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += (4 + len(a2))
	size += (4 + len(a3))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.String(a2)
	enc.String(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	err = dec.Error()
	return
}

func (s remoteForumService_client_stub) DeleteMessage(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteMessageMetrics.Begin()
	defer func() { s.deleteMessageMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.DeleteMessage", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteForumService_client_stub) DeleteThread(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteThreadMetrics.Begin()
	defer func() { s.deleteThreadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.DeleteThread", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteForumService_client_stub) GetThread(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 uint64, a4 string) (r0 uint64, r1 RawForumContent, r2 []RawForumContent, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getThreadMetrics.Begin()
	defer func() { s.getThreadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.GetThread", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += 8
	size += 8
	size += (4 + len(a4))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.Uint64(a2)
	enc.Uint64(a3)
	enc.String(a4)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	(&r1).WeaverUnmarshal(dec)
	r2 = serviceweaver_dec_slice_RawForumContent_d2322a32(dec)
	err = dec.Error()
	return
}

func (s remoteForumService_client_stub) GetThreads(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (r0 uint64, r1 []RawForumContent, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getThreadsMetrics.Begin()
	defer func() { s.getThreadsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "forumimpl.RemoteForumService.GetThreads", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += 8
	size += (4 + len(a3))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.Uint64(a2)
	enc.String(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	r1 = serviceweaver_dec_slice_RawForumContent_d2322a32(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.22.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type remoteForumService_server_stub struct {
	impl    RemoteForumService
	addLoad func(key uint64, load float64)
}

// Check that remoteForumService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*remoteForumService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s remoteForumService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "CreateMessage":
		return s.createMessage
	case "CreateThread":
		return s.createThread
	case "DeleteMessage":
		return s.deleteMessage
	case "DeleteThread":
		return s.deleteThread
	case "GetThread":
		return s.getThread
	case "GetThreads":
		return s.getThreads
	default:
		return nil
	}
}

func (s remoteForumService_server_stub) createMessage(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 uint64
	a2 = dec.Uint64()
	var a3 string
	a3 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.CreateMessage(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteForumService_server_stub) createThread(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.CreateThread(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteForumService_server_stub) deleteMessage(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.DeleteMessage(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteForumService_server_stub) deleteThread(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.DeleteThread(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteForumService_server_stub) getThread(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 uint64
	a2 = dec.Uint64()
	var a3 uint64
	a3 = dec.Uint64()
	var a4 string
	a4 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, r1, r2, appErr := s.impl.GetThread(ctx, a0, a1, a2, a3, a4)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	(r1).WeaverMarshal(enc)
	serviceweaver_enc_slice_RawForumContent_d2322a32(enc, r2)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteForumService_server_stub) getThreads(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 uint64
	a2 = dec.Uint64()
	var a3 string
	a3 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, r1, appErr := s.impl.GetThreads(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	serviceweaver_enc_slice_RawForumContent_d2322a32(enc, r1)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type remoteForumService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that remoteForumService_reflect_stub implements the RemoteForumService interface.
var _ RemoteForumService = (*remoteForumService_reflect_stub)(nil)

func (s remoteForumService_reflect_stub) CreateMessage(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (err error) {
	err = s.caller("CreateMessage", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

func (s remoteForumService_reflect_stub) CreateThread(ctx context.Context, a0 uint64, a1 uint64, a2 string, a3 string) (r0 uint64, err error) {
	err = s.caller("CreateThread", ctx, []any{a0, a1, a2, a3}, []any{&r0})
	return
}

func (s remoteForumService_reflect_stub) DeleteMessage(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	err = s.caller("DeleteMessage", ctx, []any{a0, a1}, []any{})
	return
}

func (s remoteForumService_reflect_stub) DeleteThread(ctx context.Context, a0 uint64, a1 uint64) (err error) {
	err = s.caller("DeleteThread", ctx, []any{a0, a1}, []any{})
	return
}

func (s remoteForumService_reflect_stub) GetThread(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 uint64, a4 string) (r0 uint64, r1 RawForumContent, r2 []RawForumContent, err error) {
	err = s.caller("GetThread", ctx, []any{a0, a1, a2, a3, a4}, []any{&r0, &r1, &r2})
	return
}

func (s remoteForumService_reflect_stub) GetThreads(ctx context.Context, a0 uint64, a1 uint64, a2 uint64, a3 string) (r0 uint64, r1 []RawForumContent, err error) {
	err = s.caller("GetThreads", ctx, []any{a0, a1, a2, a3}, []any{&r0, &r1})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*RawForumContent)(nil)

type __is_RawForumContent[T ~struct {
	weaver.AutoMarshal
	Id        uint64
	CreatorId uint64
	CreatedAt int64
	Text      string
}] struct{}

var _ __is_RawForumContent[RawForumContent]

func (x *RawForumContent) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("RawForumContent.WeaverMarshal: nil receiver"))
	}
	enc.Uint64(x.Id)
	enc.Uint64(x.CreatorId)
	enc.Int64(x.CreatedAt)
	enc.String(x.Text)
}

func (x *RawForumContent) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("RawForumContent.WeaverUnmarshal: nil receiver"))
	}
	x.Id = dec.Uint64()
	x.CreatorId = dec.Uint64()
	x.CreatedAt = dec.Int64()
	x.Text = dec.String()
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_RawForumContent_d2322a32(enc *codegen.Encoder, arg []RawForumContent) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_RawForumContent_d2322a32(dec *codegen.Decoder) []RawForumContent {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]RawForumContent, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
