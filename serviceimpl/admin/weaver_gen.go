// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package adminimpl

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService",
		Iface: reflect.TypeOf((*AdminService)(nil)).Elem(),
		Impl:  reflect.TypeOf(adminImpl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return adminService_local_stub{impl: impl.(AdminService), tracer: tracer, authQueryMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "AuthQuery", Remote: false}), editUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "EditUserRoles", Remote: false}), getActionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetActions", Remote: false}), getAllGroupsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetAllGroups", Remote: false}), getUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetUserRoles", Remote: false}), updateRoleMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "UpdateRole", Remote: false}), updateUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "UpdateUser", Remote: false}), viewUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "ViewUserRoles", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return adminService_client_stub{stub: stub, authQueryMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "AuthQuery", Remote: true}), editUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "EditUserRoles", Remote: true}), getActionsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetActions", Remote: true}), getAllGroupsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetAllGroups", Remote: true}), getUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "GetUserRoles", Remote: true}), updateRoleMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "UpdateRole", Remote: true}), updateUserMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "UpdateUser", Remote: true}), viewUserRolesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/admin/AdminService", Method: "ViewUserRoles", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return adminService_server_stub{impl: impl.(AdminService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return adminService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[AdminService] = (*adminImpl)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*adminImpl)(nil)

// Local stub implementations.

type adminService_local_stub struct {
	impl                 AdminService
	tracer               trace.Tracer
	authQueryMetrics     *codegen.MethodMetrics
	editUserRolesMetrics *codegen.MethodMetrics
	getActionsMetrics    *codegen.MethodMetrics
	getAllGroupsMetrics  *codegen.MethodMetrics
	getUserRolesMetrics  *codegen.MethodMetrics
	updateRoleMetrics    *codegen.MethodMetrics
	updateUserMetrics    *codegen.MethodMetrics
	viewUserRolesMetrics *codegen.MethodMetrics
}

// Check that adminService_local_stub implements the AdminService interface.
var _ AdminService = (*adminService_local_stub)(nil)

func (s adminService_local_stub) AuthQuery(ctx context.Context, a0 uint64, a1 uint64, a2 string) (err error) {
	// Update metrics.
	begin := s.authQueryMetrics.Begin()
	defer func() { s.authQueryMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.AuthQuery", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.AuthQuery(ctx, a0, a1, a2)
}

func (s adminService_local_stub) EditUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, r1 []Group, err error) {
	// Update metrics.
	begin := s.editUserRolesMetrics.Begin()
	defer func() { s.editUserRolesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.EditUserRoles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.EditUserRoles(ctx, a0, a1)
}

func (s adminService_local_stub) GetActions(ctx context.Context, a0 uint64, a1 string, a2 string) (r0 []string, err error) {
	// Update metrics.
	begin := s.getActionsMetrics.Begin()
	defer func() { s.getActionsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.GetActions", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetActions(ctx, a0, a1, a2)
}

func (s adminService_local_stub) GetAllGroups(ctx context.Context, a0 uint64) (r0 []Group, err error) {
	// Update metrics.
	begin := s.getAllGroupsMetrics.Begin()
	defer func() { s.getAllGroupsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.GetAllGroups", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetAllGroups(ctx, a0)
}

func (s adminService_local_stub) GetUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, err error) {
	// Update metrics.
	begin := s.getUserRolesMetrics.Begin()
	defer func() { s.getUserRolesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.GetUserRoles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetUserRoles(ctx, a0, a1)
}

func (s adminService_local_stub) UpdateRole(ctx context.Context, a0 uint64, a1 string, a2 string, a3 []string) (err error) {
	// Update metrics.
	begin := s.updateRoleMetrics.Begin()
	defer func() { s.updateRoleMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.UpdateRole", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateRole(ctx, a0, a1, a2, a3)
}

func (s adminService_local_stub) UpdateUser(ctx context.Context, a0 uint64, a1 uint64, a2 []Group) (err error) {
	// Update metrics.
	begin := s.updateUserMetrics.Begin()
	defer func() { s.updateUserMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.UpdateUser", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateUser(ctx, a0, a1, a2)
}

func (s adminService_local_stub) ViewUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 bool, r1 []Group, err error) {
	// Update metrics.
	begin := s.viewUserRolesMetrics.Begin()
	defer func() { s.viewUserRolesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "adminimpl.AdminService.ViewUserRoles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ViewUserRoles(ctx, a0, a1)
}

// Client stub implementations.

type adminService_client_stub struct {
	stub                 codegen.Stub
	authQueryMetrics     *codegen.MethodMetrics
	editUserRolesMetrics *codegen.MethodMetrics
	getActionsMetrics    *codegen.MethodMetrics
	getAllGroupsMetrics  *codegen.MethodMetrics
	getUserRolesMetrics  *codegen.MethodMetrics
	updateRoleMetrics    *codegen.MethodMetrics
	updateUserMetrics    *codegen.MethodMetrics
	viewUserRolesMetrics *codegen.MethodMetrics
}

// Check that adminService_client_stub implements the AdminService interface.
var _ AdminService = (*adminService_client_stub)(nil)

func (s adminService_client_stub) AuthQuery(ctx context.Context, a0 uint64, a1 uint64, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.authQueryMetrics.Begin()
	defer func() { s.authQueryMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.AuthQuery", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s adminService_client_stub) EditUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, r1 []Group, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.editUserRolesMetrics.Begin()
	defer func() { s.editUserRolesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.EditUserRoles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Group_a145ff84(dec)
	r1 = serviceweaver_dec_slice_Group_a145ff84(dec)
	err = dec.Error()
	return
}

func (s adminService_client_stub) GetActions(ctx context.Context, a0 uint64, a1 string, a2 string) (r0 []string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getActionsMetrics.Begin()
	defer func() { s.getActionsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.GetActions", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_string_4af10117(dec)
	err = dec.Error()
	return
}

func (s adminService_client_stub) GetAllGroups(ctx context.Context, a0 uint64) (r0 []Group, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getAllGroupsMetrics.Begin()
	defer func() { s.getAllGroupsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.GetAllGroups", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Group_a145ff84(dec)
	err = dec.Error()
	return
}

func (s adminService_client_stub) GetUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getUserRolesMetrics.Begin()
	defer func() { s.getUserRolesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.GetUserRoles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Group_a145ff84(dec)
	err = dec.Error()
	return
}

func (s adminService_client_stub) UpdateRole(ctx context.Context, a0 uint64, a1 string, a2 string, a3 []string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateRoleMetrics.Begin()
	defer func() { s.updateRoleMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.UpdateRole", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Uint64(a0)
	enc.String(a1)
	enc.String(a2)
	serviceweaver_enc_slice_string_4af10117(enc, a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s adminService_client_stub) UpdateUser(ctx context.Context, a0 uint64, a1 uint64, a2 []Group) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateUserMetrics.Begin()
	defer func() { s.updateUserMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.UpdateUser", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Uint64(a0)
	enc.Uint64(a1)
	serviceweaver_enc_slice_Group_a145ff84(enc, a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s adminService_client_stub) ViewUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 bool, r1 []Group, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.viewUserRolesMetrics.Begin()
	defer func() { s.viewUserRolesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "adminimpl.AdminService.ViewUserRoles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 7, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Bool()
	r1 = serviceweaver_dec_slice_Group_a145ff84(dec)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.21.2 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type adminService_server_stub struct {
	impl    AdminService
	addLoad func(key uint64, load float64)
}

// Check that adminService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*adminService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s adminService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "AuthQuery":
		return s.authQuery
	case "EditUserRoles":
		return s.editUserRoles
	case "GetActions":
		return s.getActions
	case "GetAllGroups":
		return s.getAllGroups
	case "GetUserRoles":
		return s.getUserRoles
	case "UpdateRole":
		return s.updateRole
	case "UpdateUser":
		return s.updateUser
	case "ViewUserRoles":
		return s.viewUserRoles
	default:
		return nil
	}
}

func (s adminService_server_stub) authQuery(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.AuthQuery(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) editUserRoles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, r1, appErr := s.impl.EditUserRoles(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Group_a145ff84(enc, r0)
	serviceweaver_enc_slice_Group_a145ff84(enc, r1)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) getActions(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetActions(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_string_4af10117(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) getAllGroups(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetAllGroups(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Group_a145ff84(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) getUserRoles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetUserRoles(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Group_a145ff84(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) updateRole(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 []string
	a3 = serviceweaver_dec_slice_string_4af10117(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UpdateRole(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) updateUser(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 []Group
	a2 = serviceweaver_dec_slice_Group_a145ff84(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UpdateUser(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s adminService_server_stub) viewUserRoles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, r1, appErr := s.impl.ViewUserRoles(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Bool(r0)
	serviceweaver_enc_slice_Group_a145ff84(enc, r1)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type adminService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that adminService_reflect_stub implements the AdminService interface.
var _ AdminService = (*adminService_reflect_stub)(nil)

func (s adminService_reflect_stub) AuthQuery(ctx context.Context, a0 uint64, a1 uint64, a2 string) (err error) {
	err = s.caller("AuthQuery", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s adminService_reflect_stub) EditUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, r1 []Group, err error) {
	err = s.caller("EditUserRoles", ctx, []any{a0, a1}, []any{&r0, &r1})
	return
}

func (s adminService_reflect_stub) GetActions(ctx context.Context, a0 uint64, a1 string, a2 string) (r0 []string, err error) {
	err = s.caller("GetActions", ctx, []any{a0, a1, a2}, []any{&r0})
	return
}

func (s adminService_reflect_stub) GetAllGroups(ctx context.Context, a0 uint64) (r0 []Group, err error) {
	err = s.caller("GetAllGroups", ctx, []any{a0}, []any{&r0})
	return
}

func (s adminService_reflect_stub) GetUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 []Group, err error) {
	err = s.caller("GetUserRoles", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s adminService_reflect_stub) UpdateRole(ctx context.Context, a0 uint64, a1 string, a2 string, a3 []string) (err error) {
	err = s.caller("UpdateRole", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

func (s adminService_reflect_stub) UpdateUser(ctx context.Context, a0 uint64, a1 uint64, a2 []Group) (err error) {
	err = s.caller("UpdateUser", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s adminService_reflect_stub) ViewUserRoles(ctx context.Context, a0 uint64, a1 uint64) (r0 bool, r1 []Group, err error) {
	err = s.caller("ViewUserRoles", ctx, []any{a0, a1}, []any{&r0, &r1})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*Group)(nil)

type __is_Group[T ~struct {
	weaver.AutoMarshal
	Id    uint64
	Name  string
	Roles []Role
}] struct{}

var _ __is_Group[Group]

func (x *Group) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Group.WeaverMarshal: nil receiver"))
	}
	enc.Uint64(x.Id)
	enc.String(x.Name)
	serviceweaver_enc_slice_Role_784e0cd5(enc, x.Roles)
}

func (x *Group) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Group.WeaverUnmarshal: nil receiver"))
	}
	x.Id = dec.Uint64()
	x.Name = dec.String()
	x.Roles = serviceweaver_dec_slice_Role_784e0cd5(dec)
}

func serviceweaver_enc_slice_Role_784e0cd5(enc *codegen.Encoder, arg []Role) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Role_784e0cd5(dec *codegen.Decoder) []Role {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]Role, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = (*Role)(nil)

type __is_Role[T ~struct {
	weaver.AutoMarshal
	Name    string
	Actions []string
}] struct{}

var _ __is_Role[Role]

func (x *Role) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Role.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Name)
	serviceweaver_enc_slice_string_4af10117(enc, x.Actions)
}

func (x *Role) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Role.WeaverUnmarshal: nil receiver"))
	}
	x.Name = dec.String()
	x.Actions = serviceweaver_dec_slice_string_4af10117(dec)
}

func serviceweaver_enc_slice_string_4af10117(enc *codegen.Encoder, arg []string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.String(arg[i])
	}
}

func serviceweaver_dec_slice_string_4af10117(dec *codegen.Decoder) []string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]string, n)
	for i := 0; i < n; i++ {
		res[i] = dec.String()
	}
	return res
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Group_a145ff84(enc *codegen.Encoder, arg []Group) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Group_a145ff84(dec *codegen.Decoder) []Group {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]Group, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
