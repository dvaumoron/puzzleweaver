// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package loginimpl

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService",
		Iface: reflect.TypeOf((*RemoteLoginService)(nil)).Elem(),
		Impl:  reflect.TypeOf(loginImpl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return remoteLoginService_local_stub{impl: impl.(RemoteLoginService), tracer: tracer, changeLoginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ChangeLogin", Remote: false}), changePasswordMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ChangePassword", Remote: false}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Delete", Remote: false}), getUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "GetUsers", Remote: false}), listUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ListUsers", Remote: false}), registerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Register", Remote: false}), verifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Verify", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return remoteLoginService_client_stub{stub: stub, changeLoginMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ChangeLogin", Remote: true}), changePasswordMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ChangePassword", Remote: true}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Delete", Remote: true}), getUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "GetUsers", Remote: true}), listUsersMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "ListUsers", Remote: true}), registerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Register", Remote: true}), verifyMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/login/RemoteLoginService", Method: "Verify", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return remoteLoginService_server_stub{impl: impl.(RemoteLoginService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return remoteLoginService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[RemoteLoginService] = (*loginImpl)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*loginImpl)(nil)

// Local stub implementations.

type remoteLoginService_local_stub struct {
	impl                  RemoteLoginService
	tracer                trace.Tracer
	changeLoginMetrics    *codegen.MethodMetrics
	changePasswordMetrics *codegen.MethodMetrics
	deleteMetrics         *codegen.MethodMetrics
	getUsersMetrics       *codegen.MethodMetrics
	listUsersMetrics      *codegen.MethodMetrics
	registerMetrics       *codegen.MethodMetrics
	verifyMetrics         *codegen.MethodMetrics
}

// Check that remoteLoginService_local_stub implements the RemoteLoginService interface.
var _ RemoteLoginService = (*remoteLoginService_local_stub)(nil)

func (s remoteLoginService_local_stub) ChangeLogin(ctx context.Context, a0 uint64, a1 string, a2 string, a3 string) (err error) {
	// Update metrics.
	begin := s.changeLoginMetrics.Begin()
	defer func() { s.changeLoginMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.ChangeLogin", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ChangeLogin(ctx, a0, a1, a2, a3)
}

func (s remoteLoginService_local_stub) ChangePassword(ctx context.Context, a0 uint64, a1 string, a2 string) (err error) {
	// Update metrics.
	begin := s.changePasswordMetrics.Begin()
	defer func() { s.changePasswordMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.ChangePassword", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ChangePassword(ctx, a0, a1, a2)
}

func (s remoteLoginService_local_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	// Update metrics.
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.Delete", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Delete(ctx, a0)
}

func (s remoteLoginService_local_stub) GetUsers(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUser, err error) {
	// Update metrics.
	begin := s.getUsersMetrics.Begin()
	defer func() { s.getUsersMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.GetUsers", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetUsers(ctx, a0)
}

func (s remoteLoginService_local_stub) ListUsers(ctx context.Context, a0 uint64, a1 uint64, a2 string) (r0 uint64, r1 []RawUser, err error) {
	// Update metrics.
	begin := s.listUsersMetrics.Begin()
	defer func() { s.listUsersMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.ListUsers", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ListUsers(ctx, a0, a1, a2)
}

func (s remoteLoginService_local_stub) Register(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	// Update metrics.
	begin := s.registerMetrics.Begin()
	defer func() { s.registerMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.Register", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Register(ctx, a0, a1)
}

func (s remoteLoginService_local_stub) Verify(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	// Update metrics.
	begin := s.verifyMetrics.Begin()
	defer func() { s.verifyMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "loginimpl.RemoteLoginService.Verify", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Verify(ctx, a0, a1)
}

// Client stub implementations.

type remoteLoginService_client_stub struct {
	stub                  codegen.Stub
	changeLoginMetrics    *codegen.MethodMetrics
	changePasswordMetrics *codegen.MethodMetrics
	deleteMetrics         *codegen.MethodMetrics
	getUsersMetrics       *codegen.MethodMetrics
	listUsersMetrics      *codegen.MethodMetrics
	registerMetrics       *codegen.MethodMetrics
	verifyMetrics         *codegen.MethodMetrics
}

// Check that remoteLoginService_client_stub implements the RemoteLoginService interface.
var _ RemoteLoginService = (*remoteLoginService_client_stub)(nil)

func (s remoteLoginService_client_stub) ChangeLogin(ctx context.Context, a0 uint64, a1 string, a2 string, a3 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.changeLoginMetrics.Begin()
	defer func() { s.changeLoginMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.ChangeLogin", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	size += (4 + len(a3))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.String(a1)
	enc.String(a2)
	enc.String(a3)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) ChangePassword(ctx context.Context, a0 uint64, a1 string, a2 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.changePasswordMetrics.Begin()
	defer func() { s.changePasswordMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.ChangePassword", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + len(a1))
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.String(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.Delete", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) GetUsers(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUser, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getUsersMetrics.Begin()
	defer func() { s.getUsersMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.GetUsers", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + (len(a0) * 8))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	serviceweaver_enc_slice_uint64_489cb07a(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_map_uint64_RawUser_53d8d616(dec)
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) ListUsers(ctx context.Context, a0 uint64, a1 uint64, a2 string) (r0 uint64, r1 []RawUser, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.listUsersMetrics.Begin()
	defer func() { s.listUsersMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.ListUsers", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	size += (4 + len(a2))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	enc.Uint64(a1)
	enc.String(a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	r1 = serviceweaver_dec_slice_RawUser_9050e128(dec)
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) Register(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.registerMetrics.Begin()
	defer func() { s.registerMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.Register", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	err = dec.Error()
	return
}

func (s remoteLoginService_client_stub) Verify(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.verifyMetrics.Begin()
	defer func() { s.verifyMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "loginimpl.RemoteLoginService.Verify", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += (4 + len(a1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.String(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Uint64()
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.22.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type remoteLoginService_server_stub struct {
	impl    RemoteLoginService
	addLoad func(key uint64, load float64)
}

// Check that remoteLoginService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*remoteLoginService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s remoteLoginService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ChangeLogin":
		return s.changeLogin
	case "ChangePassword":
		return s.changePassword
	case "Delete":
		return s.delete
	case "GetUsers":
		return s.getUsers
	case "ListUsers":
		return s.listUsers
	case "Register":
		return s.register
	case "Verify":
		return s.verify
	default:
		return nil
	}
}

func (s remoteLoginService_server_stub) changeLogin(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()
	var a3 string
	a3 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ChangeLogin(ctx, a0, a1, a2, a3)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) changePassword(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 string
	a1 = dec.String()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ChangePassword(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) delete(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Delete(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) getUsers(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 []uint64
	a0 = serviceweaver_dec_slice_uint64_489cb07a(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetUsers(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_map_uint64_RawUser_53d8d616(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) listUsers(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 uint64
	a1 = dec.Uint64()
	var a2 string
	a2 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, r1, appErr := s.impl.ListUsers(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	serviceweaver_enc_slice_RawUser_9050e128(enc, r1)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) register(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Register(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteLoginService_server_stub) verify(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 string
	a1 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Verify(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Uint64(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type remoteLoginService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that remoteLoginService_reflect_stub implements the RemoteLoginService interface.
var _ RemoteLoginService = (*remoteLoginService_reflect_stub)(nil)

func (s remoteLoginService_reflect_stub) ChangeLogin(ctx context.Context, a0 uint64, a1 string, a2 string, a3 string) (err error) {
	err = s.caller("ChangeLogin", ctx, []any{a0, a1, a2, a3}, []any{})
	return
}

func (s remoteLoginService_reflect_stub) ChangePassword(ctx context.Context, a0 uint64, a1 string, a2 string) (err error) {
	err = s.caller("ChangePassword", ctx, []any{a0, a1, a2}, []any{})
	return
}

func (s remoteLoginService_reflect_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	err = s.caller("Delete", ctx, []any{a0}, []any{})
	return
}

func (s remoteLoginService_reflect_stub) GetUsers(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUser, err error) {
	err = s.caller("GetUsers", ctx, []any{a0}, []any{&r0})
	return
}

func (s remoteLoginService_reflect_stub) ListUsers(ctx context.Context, a0 uint64, a1 uint64, a2 string) (r0 uint64, r1 []RawUser, err error) {
	err = s.caller("ListUsers", ctx, []any{a0, a1, a2}, []any{&r0, &r1})
	return
}

func (s remoteLoginService_reflect_stub) Register(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	err = s.caller("Register", ctx, []any{a0, a1}, []any{&r0})
	return
}

func (s remoteLoginService_reflect_stub) Verify(ctx context.Context, a0 string, a1 string) (r0 uint64, err error) {
	err = s.caller("Verify", ctx, []any{a0, a1}, []any{&r0})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*RawUser)(nil)

type __is_RawUser[T ~struct {
	weaver.AutoMarshal
	Id          uint64
	Login       string
	RegistredAt int64
}] struct{}

var _ __is_RawUser[RawUser]

func (x *RawUser) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("RawUser.WeaverMarshal: nil receiver"))
	}
	enc.Uint64(x.Id)
	enc.String(x.Login)
	enc.Int64(x.RegistredAt)
}

func (x *RawUser) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("RawUser.WeaverUnmarshal: nil receiver"))
	}
	x.Id = dec.Uint64()
	x.Login = dec.String()
	x.RegistredAt = dec.Int64()
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_uint64_489cb07a(enc *codegen.Encoder, arg []uint64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Uint64(arg[i])
	}
}

func serviceweaver_dec_slice_uint64_489cb07a(dec *codegen.Decoder) []uint64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]uint64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Uint64()
	}
	return res
}

func serviceweaver_enc_map_uint64_RawUser_53d8d616(enc *codegen.Encoder, arg map[uint64]RawUser) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for k, v := range arg {
		enc.Uint64(k)
		(v).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_map_uint64_RawUser_53d8d616(dec *codegen.Decoder) map[uint64]RawUser {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make(map[uint64]RawUser, n)
	var k uint64
	var v RawUser
	for i := 0; i < n; i++ {
		k = dec.Uint64()
		(&v).WeaverUnmarshal(dec)
		res[k] = v
	}
	return res
}

func serviceweaver_enc_slice_RawUser_9050e128(enc *codegen.Encoder, arg []RawUser) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_RawUser_9050e128(dec *codegen.Decoder) []RawUser {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]RawUser, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
