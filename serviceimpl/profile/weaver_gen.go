// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package profileimpl

import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService",
		Iface: reflect.TypeOf((*RemoteProfileService)(nil)).Elem(),
		Impl:  reflect.TypeOf(remoteProfileImpl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return remoteProfileService_local_stub{impl: impl.(RemoteProfileService), tracer: tracer, deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "Delete", Remote: false}), getPictureMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "GetPicture", Remote: false}), getProfilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "GetProfiles", Remote: false}), updatePictureMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "UpdatePicture", Remote: false}), updateProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "UpdateProfile", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return remoteProfileService_client_stub{stub: stub, deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "Delete", Remote: true}), getPictureMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "GetPicture", Remote: true}), getProfilesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "GetProfiles", Remote: true}), updatePictureMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "UpdatePicture", Remote: true}), updateProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/dvaumoron/puzzleweaver/serviceimpl/profile/RemoteProfileService", Method: "UpdateProfile", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return remoteProfileService_server_stub{impl: impl.(RemoteProfileService), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return remoteProfileService_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[RemoteProfileService] = (*remoteProfileImpl)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*remoteProfileImpl)(nil)

// Local stub implementations.

type remoteProfileService_local_stub struct {
	impl                 RemoteProfileService
	tracer               trace.Tracer
	deleteMetrics        *codegen.MethodMetrics
	getPictureMetrics    *codegen.MethodMetrics
	getProfilesMetrics   *codegen.MethodMetrics
	updatePictureMetrics *codegen.MethodMetrics
	updateProfileMetrics *codegen.MethodMetrics
}

// Check that remoteProfileService_local_stub implements the RemoteProfileService interface.
var _ RemoteProfileService = (*remoteProfileService_local_stub)(nil)

func (s remoteProfileService_local_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	// Update metrics.
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "profileimpl.RemoteProfileService.Delete", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Delete(ctx, a0)
}

func (s remoteProfileService_local_stub) GetPicture(ctx context.Context, a0 uint64) (r0 []byte, err error) {
	// Update metrics.
	begin := s.getPictureMetrics.Begin()
	defer func() { s.getPictureMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "profileimpl.RemoteProfileService.GetPicture", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetPicture(ctx, a0)
}

func (s remoteProfileService_local_stub) GetProfiles(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUserProfile, err error) {
	// Update metrics.
	begin := s.getProfilesMetrics.Begin()
	defer func() { s.getProfilesMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "profileimpl.RemoteProfileService.GetProfiles", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetProfiles(ctx, a0)
}

func (s remoteProfileService_local_stub) UpdatePicture(ctx context.Context, a0 uint64, a1 []byte) (err error) {
	// Update metrics.
	begin := s.updatePictureMetrics.Begin()
	defer func() { s.updatePictureMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "profileimpl.RemoteProfileService.UpdatePicture", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdatePicture(ctx, a0, a1)
}

func (s remoteProfileService_local_stub) UpdateProfile(ctx context.Context, a0 uint64, a1 string, a2 map[string]string) (err error) {
	// Update metrics.
	begin := s.updateProfileMetrics.Begin()
	defer func() { s.updateProfileMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "profileimpl.RemoteProfileService.UpdateProfile", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.UpdateProfile(ctx, a0, a1, a2)
}

// Client stub implementations.

type remoteProfileService_client_stub struct {
	stub                 codegen.Stub
	deleteMetrics        *codegen.MethodMetrics
	getPictureMetrics    *codegen.MethodMetrics
	getProfilesMetrics   *codegen.MethodMetrics
	updatePictureMetrics *codegen.MethodMetrics
	updateProfileMetrics *codegen.MethodMetrics
}

// Check that remoteProfileService_client_stub implements the RemoteProfileService interface.
var _ RemoteProfileService = (*remoteProfileService_client_stub)(nil)

func (s remoteProfileService_client_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "profileimpl.RemoteProfileService.Delete", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteProfileService_client_stub) GetPicture(ctx context.Context, a0 uint64) (r0 []byte, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getPictureMetrics.Begin()
	defer func() { s.getPictureMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "profileimpl.RemoteProfileService.GetPicture", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_byte_87461245(dec)
	err = dec.Error()
	return
}

func (s remoteProfileService_client_stub) GetProfiles(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUserProfile, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getProfilesMetrics.Begin()
	defer func() { s.getProfilesMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "profileimpl.RemoteProfileService.GetProfiles", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + (len(a0) * 8))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	serviceweaver_enc_slice_uint64_489cb07a(enc, a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_map_uint64_RawUserProfile_1cea2971(dec)
	err = dec.Error()
	return
}

func (s remoteProfileService_client_stub) UpdatePicture(ctx context.Context, a0 uint64, a1 []byte) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updatePictureMetrics.Begin()
	defer func() { s.updatePictureMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "profileimpl.RemoteProfileService.UpdatePicture", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + (len(a1) * 1))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Uint64(a0)
	serviceweaver_enc_slice_byte_87461245(enc, a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s remoteProfileService_client_stub) UpdateProfile(ctx context.Context, a0 uint64, a1 string, a2 map[string]string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateProfileMetrics.Begin()
	defer func() { s.updateProfileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "profileimpl.RemoteProfileService.UpdateProfile", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.Uint64(a0)
	enc.String(a1)
	serviceweaver_enc_map_string_string_219dd46d(enc, a2)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.23.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type remoteProfileService_server_stub struct {
	impl    RemoteProfileService
	addLoad func(key uint64, load float64)
}

// Check that remoteProfileService_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*remoteProfileService_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s remoteProfileService_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Delete":
		return s.delete
	case "GetPicture":
		return s.getPicture
	case "GetProfiles":
		return s.getProfiles
	case "UpdatePicture":
		return s.updatePicture
	case "UpdateProfile":
		return s.updateProfile
	default:
		return nil
	}
}

func (s remoteProfileService_server_stub) delete(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Delete(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteProfileService_server_stub) getPicture(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetPicture(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_byte_87461245(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteProfileService_server_stub) getProfiles(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 []uint64
	a0 = serviceweaver_dec_slice_uint64_489cb07a(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetProfiles(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_map_uint64_RawUserProfile_1cea2971(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteProfileService_server_stub) updatePicture(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 []byte
	a1 = serviceweaver_dec_slice_byte_87461245(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UpdatePicture(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s remoteProfileService_server_stub) updateProfile(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 uint64
	a0 = dec.Uint64()
	var a1 string
	a1 = dec.String()
	var a2 map[string]string
	a2 = serviceweaver_dec_map_string_string_219dd46d(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.UpdateProfile(ctx, a0, a1, a2)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type remoteProfileService_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that remoteProfileService_reflect_stub implements the RemoteProfileService interface.
var _ RemoteProfileService = (*remoteProfileService_reflect_stub)(nil)

func (s remoteProfileService_reflect_stub) Delete(ctx context.Context, a0 uint64) (err error) {
	err = s.caller("Delete", ctx, []any{a0}, []any{})
	return
}

func (s remoteProfileService_reflect_stub) GetPicture(ctx context.Context, a0 uint64) (r0 []byte, err error) {
	err = s.caller("GetPicture", ctx, []any{a0}, []any{&r0})
	return
}

func (s remoteProfileService_reflect_stub) GetProfiles(ctx context.Context, a0 []uint64) (r0 map[uint64]RawUserProfile, err error) {
	err = s.caller("GetProfiles", ctx, []any{a0}, []any{&r0})
	return
}

func (s remoteProfileService_reflect_stub) UpdatePicture(ctx context.Context, a0 uint64, a1 []byte) (err error) {
	err = s.caller("UpdatePicture", ctx, []any{a0, a1}, []any{})
	return
}

func (s remoteProfileService_reflect_stub) UpdateProfile(ctx context.Context, a0 uint64, a1 string, a2 map[string]string) (err error) {
	err = s.caller("UpdateProfile", ctx, []any{a0, a1, a2}, []any{})
	return
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*RawUserProfile)(nil)

type __is_RawUserProfile[T ~struct {
	weaver.AutoMarshal
	Desc string
	Info map[string]string
}] struct{}

var _ __is_RawUserProfile[RawUserProfile]

func (x *RawUserProfile) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("RawUserProfile.WeaverMarshal: nil receiver"))
	}
	enc.String(x.Desc)
	serviceweaver_enc_map_string_string_219dd46d(enc, x.Info)
}

func (x *RawUserProfile) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("RawUserProfile.WeaverUnmarshal: nil receiver"))
	}
	x.Desc = dec.String()
	x.Info = serviceweaver_dec_map_string_string_219dd46d(dec)
}

func serviceweaver_enc_map_string_string_219dd46d(enc *codegen.Encoder, arg map[string]string) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for k, v := range arg {
		enc.String(k)
		enc.String(v)
	}
}

func serviceweaver_dec_map_string_string_219dd46d(dec *codegen.Decoder) map[string]string {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make(map[string]string, n)
	var k string
	var v string
	for i := 0; i < n; i++ {
		k = dec.String()
		v = dec.String()
		res[k] = v
	}
	return res
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}

func serviceweaver_enc_slice_uint64_489cb07a(enc *codegen.Encoder, arg []uint64) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Uint64(arg[i])
	}
}

func serviceweaver_dec_slice_uint64_489cb07a(dec *codegen.Decoder) []uint64 {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]uint64, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Uint64()
	}
	return res
}

func serviceweaver_enc_map_uint64_RawUserProfile_1cea2971(enc *codegen.Encoder, arg map[uint64]RawUserProfile) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for k, v := range arg {
		enc.Uint64(k)
		(v).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_map_uint64_RawUserProfile_1cea2971(dec *codegen.Decoder) map[uint64]RawUserProfile {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make(map[uint64]RawUserProfile, n)
	var k uint64
	var v RawUserProfile
	for i := 0; i < n; i++ {
		k = dec.Uint64()
		(&v).WeaverUnmarshal(dec)
		res[k] = v
	}
	return res
}
